'use strict';

var Injector = require('injector');
var _ = require('lodash');
var crypto = require('crypto');
var moment = require('moment');
var URL = require('url');

module.exports = Injector.define([
    'config/ali_oss',
    'component/ali_oss'
], createModule);

function createModule(aliOssConfig, aliOss) {
    return _.mapValues(aliOssConfig, function (config, instanceName) {
        function Policy() {
            this._conditions = [
                {bucket: config.bucket}
            ];
            this._expiration = '';
        }

        Policy.prototype.getSignature = function () {
            var policy = {
                expiration: this._expiration,
                conditions: this._conditions
            };
            var base64Policy = new Buffer(JSON.stringify(policy), 'utf8').toString('base64');
            var signature = crypto.createHmac('sha1', config.accessKeySecret).update(base64Policy).digest('base64');
            var urlObject = URL.parse(aliOss[instanceName].signatureUrl(''));
            urlObject.search = '';
            return {
                OSSAccessKeyId: config.accessKeyId,
                policy: base64Policy,
                Signature: signature,
                url: urlObject.format()
            };
        };

        Policy.prototype.setExpiration = function (timestampInMilliseconds) {
            this._expiration = moment(timestampInMilliseconds).toISOString();
        };
        Policy.prototype.addCondition = function (name, value) {
            this._conditions.push(['eq', '$' + name, value]);
        };
        Policy.prototype.addConditionStartWith = function (name, value) {
            this._conditions.push(['starts-with', '$' + name, value]);
        };
        Policy.prototype.setContentLengthRange = function (minLength, maxLength) {
            this._conditions.push(['content-length-range', minLength, maxLength]);
        };
        return {
            createPolicy: function () {
                return new Policy();
            }
        };
    });
}