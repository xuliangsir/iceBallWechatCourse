var _ = require('lodash');
var Q = require('q');
var Injector = require('injector');

module.exports = Injector.define([
    'component/mongodb',
], createModule);

function createModule(mongodb) {
    var exports = _.mapValues(mongodb, function (mongodbInstance) {
        var getCollectionNames = function () {
            return mongodbInstance.then(function (db) {
                return db.collections();
            }).then(function (collections) {
                return _.map(collections, 'collectionName');
            });
        };
        var getDocumentsInCollection = function (collectionName, mapIdTo) {
            return mongodbInstance.then(function (db) {
                return db.collection(collectionName).find({}).toArray();
            }).then(function (documents) {
                if (mapIdTo) {
                    return documents.then(mongodb.mapDocId(mapIdTo));
                }
                return documents;
            });
        };
        var clearDocumentsInCollection = function (collectionName) {
            return mongodbInstance.then(function (db) {
                return db.collection(collectionName).deleteMany({});
            }).then(function (result) {
                return result.deletedCount;
            });
        };
        var clearDocumentsInCollections = function (collectionNames) {
            return Q(collectionNames)
                .then(function () {
                    if (!collectionNames) {
                        return getCollectionNames();
                    }
                    return collectionNames;
                }).then(function (collectionNames) {
                    return Q.all(_.map(collectionNames, function (collectionName) {
                        return clearDocumentsInCollection(collectionName);
                    }));
                })
        };
        var dropCollection = function (collectionName) {
            return mongodbInstance.then(function (db) {
                return db.collection(collectionName).drop();
            });
        };
        var dropCollections = function (collectionNames) {
            return Q(collectionNames)
                .then(function () {
                    if (!collectionNames) {
                        return getCollectionNames();
                    }
                    return collectionNames;
                }).then(function (collectionNames) {
                    return Q.all(_.map(collectionNames, function (collectionName) {
                        return dropCollection(collectionName);
                    }));
                });
        };
        var newDocumentIntoCollection = function (collectionName, data) {
            return mongodbInstance.then(function (db) {
                return db.collection(collectionName).insertOne(data);
            }).then(mongodb.resultInsertedId);

        };
        var newDocumentsIntoCollection = function (collectionName, dataArray) {
            return mongodbInstance.then(function (db) {
                return db.collection(collectionName).insertMany(dataArray);
            }).then(mongodb.resultN);

        };
        var resetCollection = function (collectionName, dataArray) {
            return clearDocumentsInCollection(collectionName)
                .then(function () {
                    if (dataArray.length) {
                        return newDocumentsIntoCollection(collectionName, dataArray);
                    }
                });
        };
        var resetCollections = function (dataOfCollections) {
            return Q.all(_.map(dataOfCollections, function (dataArray, collectionName) {
                return resetCollection(collectionName, dataArray);
            }));
        };
        return {
            getCollectionNames: getCollectionNames,
            getDocumentsInCollection: getDocumentsInCollection,
            clearDocumentsInCollection: clearDocumentsInCollection,
            clearDocumentsInCollections: clearDocumentsInCollections,
            dropCollection: dropCollection,
            dropCollections: dropCollections,
            newDocumentIntoCollection: newDocumentIntoCollection,
            newDocumentsIntoCollection: newDocumentsIntoCollection,
            resetCollection: resetCollection,
            resetCollections: resetCollections
        };
    });
    Object.defineProperty(exports, 'mongodbComponent', {
        get: function () {
            return mongodb;
        }
    });
    Object.defineProperty(exports, 'ObjectId', {
        get: function () {
            return mongodb.mongodb.ObjectId;
        }
    });
    Object.defineProperty(exports, 'ObjectID', {
        get: function () {
            return mongodb.mongodb.ObjectId;
        }
    });
    return exports;
}