'use strict';

var _ = require('lodash');
var util = require('util');
var expressSession = require('express-session');

var Injector = require('injector');

module.exports = Injector.define([
    'component/mongodb'
], createModule);

function createModule(mongodb) {
    var defaults = {
        mongodbInstanceName: 'main',
        collectionName: 'session',
        sessionLifetimeInMilliSeconds: 1200000,
        sessionGcCycle: 1000
    };
    var MongoDbSessionStore = function (options) {
        var config = _.defaults(options, defaults);
        this._mongodbInstanceName = config.mongodbInstanceName;
        this._collectionName = config.collectionName;
        this.sessionLifetimeInMilliSeconds = config.sessionLifetimeInMilliSeconds;
        this._sessionGcCycle = config.sessionGcCycle;
    };
    util.inherits(MongoDbSessionStore, expressSession.Store);


    MongoDbSessionStore.prototype._mongodbInstanceName = null;
    MongoDbSessionStore.prototype._collectionName = null;
    MongoDbSessionStore.prototype.sessionLifetimeInMilliSeconds = null;
    MongoDbSessionStore.prototype._sessionGcCycle = null;
    MongoDbSessionStore.prototype._times = 0;

    MongoDbSessionStore.prototype.getCollection = function () {
        return mongodb[this._mongodbInstanceName].then(function (db) {
            return db.collection(this._collectionName);
        }.bind(this));
    };

    MongoDbSessionStore.prototype.destroy = function (sid, callback) {
        var filter = {
            _id: sid
        };
        this.getCollection().then(function (collection) {
            return collection.deleteOne(filter);
        }).nodeify(callback);
    };

    MongoDbSessionStore.prototype.destroyExpired = function () {
        var nowTime = Date.now();
        var filter = {
            expired: {
                $lte: nowTime
            }
        };
        this.getCollection().then(function (collection) {
            return collection.deleteMany(filter);
        }).nodeify(callback);
    };

    MongoDbSessionStore.prototype.get = function (sid, callback) {
        var nowTime = Date.now();
        var filter = {
            _id: sid,
            expired: {
                $gt: nowTime
            }
        };
        this.getCollection().then(function (collection) {
            return collection.find(filter).limit(1).toArray();
        }).then(mongodb.pickOneDoc())
            .then(function (doc) {
                if (doc) {
                    return doc.session;
                }
            }).nodeify(callback);
    };

    MongoDbSessionStore.prototype.set = function (sid, session, callback) {
        var nowTime = Date.now();
        var filter = {
            _id: sid
        };
        var update = {
            _id: sid,
            expired: nowTime + this.sessionLifetimeInMilliSeconds,
            session: session
        };
        this.getCollection().then(function (collection) {
            return collection.updateOne(filter, update, {
                upsert: true
            });
        }).then(function (result) {
            this._times += 1;
            if (this._times>this._sessionGcCycle) {
                this._times = 0;
                return this.destroyExpired();
            }
        }.bind(this)).nodeify(callback);
    };

    return MongoDbSessionStore;
}