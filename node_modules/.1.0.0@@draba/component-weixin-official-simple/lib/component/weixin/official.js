'use strict';

var Injector = require('injector');
var _ = require('lodash');
var Q = require('q');
var request = require('request');

module.exports = Injector.define([
    'config/weixin_official',
    'component/mongodb'
], createModule);

var ERROR_CODE = {
    ACCESS_TOKEN_GET_FAILED: 40001,
    ACCESS_TOKEN_EXPIRED:42001,
    REFRESH_TOKEN_EXPIRED:42002,
    OAUTH_CODE_TIMEOUT: 42003,
    TOKEN_MARKED_INVALID: 42007,
    OAUTH_CODE_INVALID: 40029,
    REFRESH_TOKEN_INVALID: 40030
};
function createModule(weiXinOfficialConfig) {
    return _.mapValues(weiXinOfficialConfig, function (config) {
        var exports = {
            ERROR_CODE: ERROR_CODE
        };
        exports.getWebOAuthToken = function (code) {
            var defer = Q.defer();
            var url = 'https://api.weixin.qq.com/sns/oauth2/access_token';
            request.get({
                url: url, qs: {
                    appid: config.appId,
                    secret: config.appSecret,
                    code: code,
                    grant_type: 'authorization_code'
                }, json: true
            }, function (err, res, body) {
                if (err) {
                    defer.reject(err);
                } else if (body.errcode) {
                    defer.reject(body);
                } else {
                    defer.resolve(body);
                }
            });
            return defer.promise;
        };
        exports.refreshWebOAuthToken = function (refreshToken) {
            var defer = Q.defer();
            var url = 'https://api.weixin.qq.com/sns/oauth2/refresh_token';
            request.get({
                url: url, qs: {
                    appid: config.appId,
                    refresh_token: refreshToken,
                    grant_type: 'refresh_token'
                }, json: true
            }, function (err, res, body) {
                if (err) {
                    defer.reject(err);
                } else if (body.errcode) {
                    defer.reject(body);
                } else {
                    defer.resolve(body);
                }
            });
            return defer.promise;
        };
        return exports;
    });
}