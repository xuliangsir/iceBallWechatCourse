'use strict';
var Injector = require('injector');
var Q = require('q');
var _ = require('lodash');
var moment = require('moment');

module.exports = Injector.define([
    'config/weixin_web_oauth',
    'component/weixin/official',
    'component/mongodb'
], createModule);

function createModule(weiXinWebOauthConfig,
                      weiXinOfficial,
                      mongodb) {
    return _.mapValues(weiXinWebOauthConfig, function (config) {
        var exports = {};
        var times = config.gcCycle;
        exports.getVisitorBaseInfo = function (code, sessionId) {
            return mongodb[config.storeInstanceName].then(function (db) {
                var nowTime = moment().valueOf();
                var filter = {
                    _id: code,
                    expired: {
                        $gt: nowTime
                    }
                };
                var storeCollection = db.collection(config.storeTableName);
                return Q(storeCollection.find(filter).limit(1).toArray())
                    .then(mongodb.pickOneDoc()).then(function (record) {
                        if (record) {
                            if (record.error) {
                                return Q.reject(record.error);
                            }
                            if (record.sessionId!==sessionId) {
                                return undefined;
                            }
                            var refreshTime = record.expired + config.refreshTime * 1000;
                            if (config.refreshTime > 0) {
                                refreshTime -= record.expires_in * 1000;
                            }
                            if (refreshTime > nowTime) {
                                return record;
                            }
                            return weiXinOfficial[config.officialInstanceName].refreshWebOAuthToken(record.refresh_token)
                                .then(function (token) {
                                    var data = _.extend(record, token, {
                                        expired: nowTime + token.expires_in * 1000
                                    });
                                    return storeCollection.updateOne({_id: code}, data, {upsert: true})
                                        .then(function () {
                                            return data;
                                        });
                                }).catch(function (err) {
                                    return Q.resolve()
                                        .then(function () {
                                            if (!(err instanceof Error)) {
                                                var filter = {
                                                    _id: code
                                                };
                                                var data = {
                                                    $set: {
                                                        error: err
                                                    }
                                                };
                                                return storeCollection.updateOne(filter, data);
                                            }
                                        }).then(function () {
                                            return Q.reject(err);
                                        });
                                });
                        } else {
                            return weiXinOfficial[config.officialInstanceName].getWebOAuthToken(code)
                                .then(function (token) {
                                    var filter = {
                                        _id: code
                                    };
                                    var sessionId = mongodb.newObjectIdString();
                                    var data = _.extend(token, {
                                        _id: code,
                                        code: code,
                                        sessionId: sessionId,
                                        expired: nowTime + token.expires_in * 1000
                                    });
                                    return storeCollection.updateOne(filter, data, {upsert: true})
                                        .then(function () {
                                            return _.extend(data, {
                                                isNew: true
                                            });
                                        });
                                })
                        }
                    }).then(function (data) {
                        times -= 1;
                        if (times <= 0) {
                            times = config.gcCycle;
                        }
                        var filter = {
                            expired: {
                                $lte: nowTime
                            }
                        };
                        return storeCollection.deleteMany(filter)
                            .then(function () {
                                return data;
                            });
                    });
            });
        };
        return exports;
    });
}
